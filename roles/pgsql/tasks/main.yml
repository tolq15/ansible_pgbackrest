---
- name: Build the list of the PostgreSQL defined ports
  set_fact:
    pg_ports: "{{ pg_ports |default([]) + [item.value.params.port] }}"
  with_dict: "{{ pg_clusters }}"

- name: Check the port is unique within the clusters
  assert:
    that: >
          pg_ports | count
          ==
          pg_ports | unique | count
    msg: "Duplicated port detected in the cluster definition. Please check the variable pg_clusters in group_vars or in hosts_vars for any duplicated port."

- name: create the database directories
  include: create_db_dir.yml
  with_dict: "{{ pg_clusters }}"
  loop_control:
    loop_var: db_cluster


- name: Create the files with the postgresql super user password
  lineinfile:
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0600
    dest: "{{ pg_home_dir }}/.pg_super_pwd_{{item.key}}"
    line: "{{ item.value.pg_super_password|default(pg_super_password) }}"
    create: yes
  with_dict: "{{ pg_clusters }}"


- name: Initialise the postgresql clusters using an include
  include: init_cluster.yml
  with_dict: "{{ pg_clusters }}"
  loop_control:
    loop_var: db_cluster


- name: Remove the the files with the postgresql super user password
  file:
    path: "{{ pg_home_dir }}/.pg_super_pwd_{{item.key}}"
    state: absent
  with_dict: "{{ pg_clusters}}"


- name: Ensure the conf.d directory is present in the configuration folder
  file:
    path: "/etc/postgresql/{{item.value.version}}/{{item.key}}/conf.d"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0744
  with_dict: "{{ pg_clusters}}"


- name: Ensure the conf.d path is set as include in postgresql.conf
  lineinfile:
    path: "/etc/postgresql/{{item.value.version}}/{{item.key}}/postgresql.conf"
    regexp: "^include_dir = 'conf.d'"
    line: "include_dir = 'conf.d'"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644
  with_dict: "{{ pg_clusters}}"


- name: Ship the custom postgresql.conf in conf.d
  template:
    src: postgresql.conf.j2
    dest: "/etc/postgresql/{{item.value.version}}/{{item.key}}/conf.d/01postgresql.conf"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644
  with_dict: "{{ pg_clusters}}"


- name: Ship the custom pgbackrest.conf in conf.d
  template:
    src: postgresql_pgbackrest.conf.j2
    dest: "/etc/postgresql/{{item.value.version}}/{{item.key}}/conf.d/99postgresql_pgbackrest.conf"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644
  with_dict: "{{ pg_clusters}}"



- name: Ship the pg_hba.conf in cluster's config directory
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{item.value.version}}/{{item.key}}/pg_hba.conf"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644
  with_dict: "{{ pg_clusters}}"


- name: Ship the  logrotate configuration to the servers
  template:
    src: logrotate_pgsql.j2
    dest: "{{ logrotate_pgsql }}"
    owner: "root"
    group: "{{ pg_osgroup }}"
    mode: 0644


- name: populate the pgpass file with the postgres super users connection data
  blockinfile:
    dest: "{{ pg_home_dir }}/.pgpass"
    create: yes
    state: present
    owner: "{{ pg_osuser }}"
    mode: 0600
    block: |
     localhost:{{ item.value.params.port }}:*:{{ pg_osuser }}:{{ item.value.pg_super_password|default(pg_super_password) }}
     *:{{ item.value.params.port }}:*:{{ pg_osuser }}:{{ item.value.pg_super_password|default(pg_super_password) }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK SUPER USER FOR cluster {{ item.key }}:{{ item.value.params.port }}"
  with_dict: "{{ pg_clusters }}"


- name: populate the pg_service file with the postgres super users connection data
  blockinfile:
    dest: "{{ pg_home_dir }}/.pg_service.conf"
    create: yes
    state: present
    owner: "{{ pg_osuser }}"
    mode: 0600
    block: |
      [{{ item.key }}]
      host=localhost
      port={{ item.value.params.port }}
      user={{ item.value.pg_super_user|default(pg_super_user) }}
      dbname=template1

    marker: "# {mark} ANSIBLE MANAGED BLOCK SUPER USER FOR cluster {{ item.key }}:{{ item.value.params.port }}"
  with_dict: "{{ pg_clusters }}"


- name: Start the postgresql service
  service:
    name: postgresql
    state: started
  when: inventory_hostname == pg_backrest.primary

- name: Ship the start.conf in cluster's config directory
  template:
    src: start.conf.j2
    dest: "/etc/postgresql/{{item.value.version}}/{{item.key}}/start.conf"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644
  with_dict: "{{ pg_clusters}}"
