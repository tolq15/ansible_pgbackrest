#!/usr/bin/env bash
{% for dbhost in groups['pgsql'] %}
{% set pg_clusters = pg_clusters|combine(hostvars[dbhost].pg_clusters|default(pg_clusters)) %}
{% endfor %}
script_dir=`dirname "$0"`
here=`pwd`
cd $script_dir
rst_ok=()
rst_ko=()

function timestamp()
{
  date '+%Y-%m-%d %H:%M:%S'


}

wait_for_db()
{
  port=$1
  max_tries=30
  for db_conn in {1..$max_tries}
  do
    pg_isready -p $port -q
    db_status=$?
    if [ $db_status -eq 0 ]
    then
      break
    fi
    sleep 10
  done

}

function restore_db()
{
  stanza=$1
  version=$2
  data_area=$3
  port=$4
  echo "$(timestamp) Starting restore test for stanza $stanza $data_area"
  echo "$(timestamp) Stopping the cluster $stanza"
  pg_ctlcluster $version $stanza stop -m fast
  echo "$(timestamp) Removing the contents in $data_area"
  rm -fr $data_area/*
  echo "$(timestamp) Running pgbackrest restore"
  pgbackrest restore --stanza $stanza
  echo "$(timestamp) Starting the cluster $stanza"
  pg_ctlcluster $version $stanza start
  wait_for_db $port
  if [ $db_status -eq 0 ]
  then
    bck_ok=( "${bck_ok[@]}" $stanza )
  else
    bck_ko=( "${bck_ko[@]}" $stanza )
  fi
  echo "$(timestamp) Cluster $stanza status after restore: $db_status"
  echo "$(timestamp) Stopping the cluster $stanza"
  pg_ctlcluster $version $stanza stop -m fast
  echo "$(timestamp) Removing the contents in $data_area"
  rm -fr $data_area/*
  touch $data_area/PG_VERSION
  echo "$(timestamp) Restore test for stanza $stanza complete"
}

{% for db_cluster in pg_clusters %}
{% set db_dirs = pg_dirs| combine(pg_clusters[db_cluster].pg_dirs|default(pg_dirs)) %}


  restore_db "{{ db_cluster }}" "{{pg_clusters[db_cluster].version}}" "{{ db_dirs.data_area }}/{{pg_clusters[db_cluster].version}}/{{db_cluster}}" "{{ pg_clusters[db_cluster].params.port }}"

{% endfor %}
for recipient in {{ smtp_recipients|join(' ') }}
do
  if [ {{ '${#bck_ok[@]}' }} -gt 0 ]
  then
    echo "$(timestamp) stanzas successful: ${bck_ok[@]}"
    echo "Restore test successful for stanzas: ${bck_ok[@]}" | mutt -s "[{{ ansible_hostname }}] - RESTORE OK" $recipient
  fi
  if [ {{ '${#bck_ko[@]}' }} -gt 0 ]
  then
    echo "$(timestamp) stanzas failed: ${bck_ko[@]}"
    echo "Restore test failed for stanzas: ${bck_ko[@]}" | mutt -s "[{{ ansible_hostname }}] - RESTORE KO " $recipient
  fi
done
cd $here
